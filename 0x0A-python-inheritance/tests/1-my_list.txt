=======================
1-my_list.py
=======================

This module defines a class `MyList` that inherits from `list`.

Instantiation
=============

`MyList` no args, return an empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)

Usage
=====

`MyList` is an inherited `list` class, and thus features the same methods.

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

::

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

::

    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]

`print_sorted` Method
=======================

`MyList` implements a public instance method
`print_sorted(self)`.

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

::

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

::

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

::

    >>> print(my_list)
    [1, 4, 2, 3, 5]

::

    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("Holberton")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['Br', 'Po', 'Sc', 'Ho', 'Be']

::

    >>> my_list.print_sorted()
    ['Be', 'Br', 'Ho', 'Po', 'Sc']


::

    >>> print(my_list)
    ['Br', 'Po', 'Sc', 'Ho', 'Be']

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

::

    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
